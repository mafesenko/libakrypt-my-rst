.. FAQ_libakrypt documentation master file, created by
   sphinx-quickstart on Thu Feb  2 20:07:17 2023.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.
   

FAQ по библиотеке libakrypt
====================================================

Как отследить ошибки при выполнении библиотечных функций?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для отслеживания ошибок при работе с библиотечными функциями необходимо использовать функцию ``ak_error_get_value()``.

Увидеть ее использование можно во всех примерах раздела FAQ.


БЛОЧНЫЕ ШИФРЫ
----------------

Как создать секретный ключ алгоритма блочного шифрования?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Инициализировать секретный ключ можно несколькими способами:

1)	С помощью функции алгоритма Магма:
:: 

	ak_bckey_create_magma(&key);

Использование функции можно увидеть в следующих примерах:

Пример 2 – 

2)	С помощью функции алгоритма Кузнечик:
:: 
	
	ak_bckey_create_kuznechik(&key);

Использование функции можно увидеть в следующих примерах:

Пример  4 - инициализация секретного ключа алгоритма Магма по OID, инициализация контекста ключа из заданного константного значения пароля, зашифрование и расшифрование текста в режиме простой замены (ecb);


3)	По OID данного алгоритма:
::
	
	ak_bckey_create_oid(&key, ak_oid_find_by_name("magma"));
	
	/* Возможные значения OID для aead шифрования:
    
   	"magma"
	"kuznechik"
    
        Все OID аналогичны заданию функции напрямую */  


Примеры использования функции можно посмотреть в следующих примерах:

Пример 1 - 	ДОБАВИТЬ

Как создать контекст ключа блочного шифрования?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Контекст ключа ``ak_bckey`` – основная структура данных в разделе блочного шифрования.

Инициализировать ее можно несколькими способами:

1)	Инициализация контекста ключа значением, выработанным из заданного значения пароля при помощи алгоритма PBKDF2, описанного  в рекомендациях по стандартизации Р 50.1.111-2016 (Пароль должен быть непустой строкой символов в формате utf8):

:: 

	ak_bckey_set_key_from_password(
		&key, /*Контекст ключа алгоритма блочного шифрования*/
		password, /*Пароль, представленный в виде строки символов*/
		strlen(password), /*Длина пароля в байтах*/
		s, /*Случайный вектор, представленный в виде строки символов.*/
		strlen(s) /*Длина случайного вектора в байтах*/
		);

Использование функции можно увидеть в следующих примерах:

Пример 1,2,3,4 - 	ДОБАВИТЬ

2)	Инициализация контекста ключа случайным (псевдо-случайным) значением, выработанным генератором псевдо-случайных чисел:

::

	ak_bckey_set_key_random(
		&key, /*Контекст ключа алгоритма блочного шифрования*/
		&rand /*Контекст генератора случайных (псевдослучайных) чисел*/
		);


Использование функции можно увидеть в следующих примерах:
Пример 6,8,9 - 	ДОБАВИТЬ

3) 	Инициализация контекста ключа значением, содержащимся в области памяти: ОПИСАТЬ АРГУМЕНТЫ

::

	ak_bckey_set_key(&key, skey, sizeof(skey))


Как зашифровать/расшифровать данные в режиме простой замены (electronic codebook, ecb)?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Зашифровать текст в режиме простой замены (ecb) можно с помощью следующей функции: 

::

	ak_bckey_encrypt_ecb(
		&key, /*Контекст ключа алгоритма блочного шифрования*/
		data, /*Указатель на область памяти, где хранятся данные для зашифрования */
		out, /*Указатель на область памяти, куда помещаются зашифрованные данные*/
		128 /* Размер зашифровываемых данных (в байтах)*/
		);

Использование функции можно увидеть в следующих примерах:

Пример 1 – инициализация секретного ключа по OID алгоритма Кузнечик


Расшифровать в режиме простой замены (ecb) можно с помощью функции, аналогичной зашифрованию:

:: 

	ak_bckey_decrypt_ecb(
		&key, /*Контекст ключа алгоритма блочного шифрования*/
		data, /*Указатель на область памяти, где хранятся данные для зашифрования */
		out, /*Указатель на область памяти, куда помещаются зашифрованные данные*/
		128 /* Размер зашифровываемых данных (в байтах)*/
		);

Использование функции можно увидеть в следующих примерах:

ДОБАВИТЬ ВЕЗДЕ РАСШИФРОВАНИЕ В КОД

Пример 1 – инициализация секретного ключа по OID алгоритма Кузнечик

Пример 2 – инициализация секретного ключа по алгоритму Магма

Пример 3 – инициализация секретного ключа по алгоритму Кузнечик

Пример 4 – инициализация секретного ключа по OID алгоритма Магма

Пример 6 –

8 – добавить расшифрование в код

Пример 7 - УБРАТЬ

Пример 5 - УБРАТЬ

Как зашифровать/расшифровать данные в режиме простой замены с зацеплением из ГОСТ Р 34.13-2015 (cipher block chaining, cbc)?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Зашифровать текст в режиме простой замены (cbc) можно с помощью следующей функции: 

::

	ak_bckey_encrypt_cbc(
		&key, /* Контекст ключа алгоритма блочного шифрования */
		data, /* Указатель на область памяти, где хранятся данные для зашифрования */
		out, /* Указатель на область памяти, куда помещаются зашифрованные данные */
		128, /* Размер зашифровываемых данных (в байтах) */
		openssl_ivcbc, /* Указатель на произвольную область памяти - синхропосылку */
		sizeof(openssl_ivcbc) /* Длина синхропосылки в байтах. Согласно  стандарту ГОСТ Р 34.13-2015 длина синхропосылки должна быть ровно 	в два раза меньше, чем длина блока, то есть 4 байта для Магмы и 8 байт для Кузнечика.*/
		);

Предварительно необходимо создать синхропосылку, передаваемую в качестве аргумента в описанную выше функцию.

Пример синхропосылки:

::

	ak_uint8 openssl_ivcbc[32] = {
		0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xce, 0xf0, 
		0xa1, 0xb2, 0xc3, 0xd4, 0xe5, 0xf0, 0x01, 0x12, 
		0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x90, 
		0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19
		};

Использование функции можно увидеть в следующих примерах:

Пример 12 и 13 – 

Расшифровать текст в режиме простой замены (cbc) можно с помощью функции, аналогичной зашифрованию: 

::

	ak_bckey_decrypt_cbc(
		&key, /* Контекст ключа алгоритма блочного шифрования*/
		data, /* Указатель на область памяти, где хранятся данные для зашифрования */
		out, /* Указатель на область памяти, куда помещаются зашифрованные данные */
		128 /* Размер зашифровываемых данных (в байтах) */
		openssl_ivcbc, /* Указатель на произвольную область памяти - синхропосылку */
		sizeof(openssl_ivcbc) /*Длина синхропосылки в байтах. Согласно  стандарту ГОСТ Р 34.13-2015 длина синхропосылки должна быть ровно 	в два раза меньше, чем длина блока, то есть 4 байта для Магмы и 8 байт для Кузнечика */
		);

Использование функции можно увидеть в следующих примерах:

Пример 12 и 13 – 

Как зашифровать/расшифровать данные в режиме гаммирования – из ГОСТ Р 34.13-2015 (counter mode, ctr)?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как расшифровать/расшифровать данные в режиме гаммирования с обратной связью по выходу (output feedback, ofb)?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как расшифровать/расшифровать данные в режиме гаммирования с обратной связью по шифртексту из ГОСТ Р 34.13-2015 (cipher feedback, cfb)?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как расшифровать/расшифровать данные в режиме «CTR-ACPKM» из Р1323565.1.017—2018?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как расшифровать/расшифровать данные в режиме «XTS»?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



АЛГОРИТМ AEAD
----------------------------------------------------

Как создание контекста алгоритма аутентифицированного шифрования?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В данной библиотеке описано 12 функций для создания контекста алгоритма аутентифицированного шифрования. Коротко рассмотрим каждую из них здесь.

1) 
2)
3)
4)
5)
6)
7)
8)
9)
10)
11)
12)

Как осуществить аутентифицируемое зашифрование данных?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как осуществить аутентифицируемое расшифрование данных?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


ДРУГИЕ БИБЛИОТЕЧНЫЕ ФУНКЦИИ
----------------------------------------------------

Как выработать случайное (псевдо-случайное значение)?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Несколько вариантов:

1)	Линейный конгруэнтный генератор (Linear congruential generator, lcg):
::

	ak_random_create_lcg(&rand);

Примеры:

2)	Нелинейный конгруэнтный генератор с обратной квадратичной связью (Nonlinear-feedback shift register, nlfsr)
::
	
	ak_random_create_nlfsr(&rand);
	
3) 	Генератор по заданному OID алгоритма генерации псевдо-случайных чисе
:: 

	ak_random_create_oid(&rand, ak_oid_find_by_name( /* Нужный алгоритм */ ));

Пример 9,10 – добавить расшифрование


Как открыть файл на чтение?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Файл на чтение можно открыть с помощью функции ``ak_file_open_to_read``. 

Проверить работу данной функции можно в примере 24.

Как прочитать пароль из консоли?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Чтение пароля из консоли реализовано в библиотеке с помощью фукнции  ``ak_password_read``. 

Проверить работу данной функции можно в примере 38.

Как прочитать строку из консоли?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Чтение строки из консоли реализовано в библиотеке с помощью фукнции  ``ak_string_read``. 

Проверить работу данной функции можно в примере 39.





ПРОБЛЕМЫ
-----------
1)	Пример 5 полностью повторяет пример 2 – заменить 2 пример на 5 - done

2)	Пример 7 полностью повторяет пример 6 – заменить 6 пример на 7 - done

3)	Пример 11 полностью повторяет пример 10 – заменить 10 пример на 11 - done

4)	Примеры 28 и 29 не нужны

5)	12 и 13 почти одинаковые - поменять шифрование в одном (1 и 3, 2 и 4 - то же самое)

6) 	понять каких двух способов создания контекста аеад не хватает и дописать два примера

7)	20 и 22

8) 	19 и 23

9) 	14 и 18

10) 	15 и 16



ОПИСАНИЕ ПРИМЕРОВ + ПРАВКИ
------------------------------
example-1 ОК  	
	* создание секретного ключа алгоритма Кузнечик по OID, 
	* инициализация контекста ключа значением, выработанным из заданного значения ароля, 
	* зашифрование и расшифрование текста в режиме простой замены (ecb);

example-2 почти ок 
	* создание секретного ключа алгоритма Магма по OID, 
	* инициализация контекста ключа значением, выработанным из заданного значения пароля, 
	* зашифрование и расшифрование текста в режиме ctr; 
	* **!!!!  НАПИСАТЬ КОММЕНТЫ**

example-3 почти ок 
	* создание секретного ключа алгоритма Кузнечик, 
	* инициализация контекста ключа случайным (псевдо-случайным) значением, выработанным генератором псевдо-случайных чисел (lcg), 
	* зашифрование и расшифрование текста в режиме ofb; 
	* **!!!! НАПИСАТЬ КОММЕНТЫ**

example-4 почти ок 
	* создание секретного ключа алгоритма Магма, 
	* инициализация контекста ключа случайным (псевдо-случайным) значением, выработанным генератором псевдо-случайных чисел (nlfsr), 
	* зашифрование и расшифрование текста в режиме cfb; 
	* **!!!!  НАПИСАТЬ КОММЕНТЫ**

example-5 почти ок 
	* создание секретного ключа алгоритма Магма, 
	* инициализация контекста ключа значением, содержащимся в области памяти, 
	* зашифрование и расшифрование текста в режиме acpkm; 
	* **!!!! НАПИСАТЬ КОММЕНТЫ**

example-6 почти ок 
	* создание секретного ключа алгоритма Магма, 
	* инициализация контекста ключа значением, содержащимся в области памяти, 
	* зашифрование и расшифрование текста в режиме xtsmac; 
	* **!!!! НАПИСАТЬ КОММЕНТЫ**

example-7 почти ок 
	* создание секретного ключа алгоритма Кузнечик, 
	* инициализация контекста ключа случайным (псевдо-случайным) значением, выработанным генератором псевдо-случайных чисел (nlfsr), 
	* зашифрование и расшифрование текста в режиме cbc; 
	* **!!!! НАПИСАТЬ КОММЕНТЫ**

example-8 почти ок 
	* создание контекста алгоритма аутентифицированного шифрования Р 1323565.1.024-2019 для блочного шифра Магма, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации по отдельности, 
	* зашифрование данных с одновременным вычислением имитовставки; 
	* **!!!! РАЗБИТЬ УСТАНОВКУ ЗНАЧЕНИЙ КОНТЕКСТА КЛЮЧЕЙ НА ДВЕ ФУНКЦИИ ak_aead_set_encrypt_key и ak_aead_set_auth_key**

example-9 ок 
	* создание контекста алгоритма аутентифицированного шифрования Р 1323565.1.024-2019 для блочного шифра Кузнечик, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки;

example-10  ок  
	* создание контекста алгоритма аутентифицированного шифрования xtsmac для блочного шифра Магма, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки;

example-11 ок 
	* создание контекста алгоритма аутентифицированного шифрования ctr-cmac для блочного шифра Магма, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки;

example-12 ок 
	* создание контекста алгоритма аутентифицированного шифрования ctr-cmac для блочного шифра Кузнечик, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки; 

example-13 ок 
	* создание контекста алгоритма аутентифицированного шифрования ctr-nmac для блочного шифра Магма, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки; 

example-14 ок 
	* создание контекста алгоритма аутентифицированного шифрования ctr-nmac для блочного шифра Кузнечик, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки;  

example-15 почти ок 
	* создание контекста алгоритма аутентифицированного шифрования ctr-hmac для блочного шифра Магма и функции хеширования Стрибог256, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки; 
	* **!!!! разобраться зачем тут стрибог и если есть зачем - запихнуть хэширование сюда**

example-16 почти ок 
	* создание контекста алгоритма аутентифицированного шифрования ctr-hmac для блочного шифра Кузнечик и функции хеширования Стрибог256, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки; 
	* **!!!! разобраться зачем тут стрибог и если есть зачем - запихнуть хэширование сюда**

example-17 почти ок 
	* создание контекста алгоритма аутентифицированного шифрования ctr-hmac для блочного шифра Магма и функции хеширования Стрибог512, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки; 
	* **!!!! разобраться зачем тут стрибог и если есть зачем - запихнуть хэширование сюда**

example-18 почти ок 
	* создание контекста алгоритма аутентифицированного шифрования ctr-hmac для блочного шифра Кузнечик и функции хеширования Стрибог512, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки; 
	* **!!!! разобраться зачем тут стрибог и если есть зачем - запихнуть хэширование сюда**

example-19 ок 
	* создание контекста алгоритма аутентифицированного шифрования по заданному OID, 
	* инициализация контекста алгоритма aead значениями ключей шифрования и аутентификации, 
	* зашифрование данных с одновременным вычислением имитовставки;

пример 20

пример 21

пример 22

пример 23

пример 24

пример 25

пример 26

пример 27

пример 28

пример 29

пример 30

пример 31

пример 32

пример 33

пример 34

пример 35

пример 36

пример 37

пример 38

пример 39






